(()=>{"use strict";var e=function(t,r){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},e(t,r)};function t(t,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=t}e(t,r),t.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}function r(e,t){var r,n,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(a){return function(c){if(r)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(u=0)),u;)try{if(r=1,n&&(o=2&c[0]?n.return:c[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,c[1])).done)return o;switch(n=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,n=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){u.label=c[1];break}if(6===c[0]&&u.label<o[1]){u.label=o[1],o=c;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(c);break}o[2]&&u.ops.pop(),u.trys.pop();continue}c=t.call(e,u)}catch(e){c=[6,e],n=0}finally{r=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,a])}}}function n(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u}function i(e,t,r){if(r||2===arguments.length)for(var n,o=0,i=t.length;o<i;o++)!n&&o in t||(n||(n=Array.prototype.slice.call(t,0,o)),n[o]=t[o]);return e.concat(n||Array.prototype.slice.call(t))}function u(e){return this instanceof u?(this.v=e,this):new u(e)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var c=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function a(e){return"function"==typeof e}var s,l=((s=function(e){var t;t=this,Error.call(t),t.stack=(new Error).stack,this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}).prototype=Object.create(Error.prototype),s.prototype.constructor=s,s);function f(e,t){if(e){var r=e.indexOf(t);0<=r&&e.splice(r,1)}}var p=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,r,u,c;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var f=n(s),p=f.next();!p.done;p=f.next())p.value.remove(this)}catch(t){e={error:t}}finally{try{p&&!p.done&&(t=f.return)&&t.call(f)}finally{if(e)throw e.error}}else s.remove(this);var d=this.initialTeardown;if(a(d))try{d()}catch(e){c=e instanceof l?e.errors:[e]}var y=this._finalizers;if(y){this._finalizers=null;try{for(var v=n(y),b=v.next();!b.done;b=v.next()){var m=b.value;try{h(m)}catch(e){c=null!=c?c:[],e instanceof l?c=i(i([],o(c)),o(e.errors)):c.push(e)}}}catch(e){r={error:e}}finally{try{b&&!b.done&&(u=v.return)&&u.call(v)}finally{if(r)throw r.error}}}if(c)throw new l(c)}},e.prototype.add=function(t){var r;if(t&&t!==this)if(this.closed)h(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(r=this._finalizers)&&void 0!==r?r:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&f(t,e)},e.prototype.remove=function(t){var r=this._finalizers;r&&f(r,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}();function d(e){return e instanceof p||e&&"closed"in e&&a(e.remove)&&a(e.add)&&a(e.unsubscribe)}function h(e){a(e)?e():e.unsubscribe()}p.EMPTY;var y={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},v={setTimeout:function(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];var u=v.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,i([e,t],o(r))):setTimeout.apply(void 0,i([e,t],o(r)))},clearTimeout:function(e){var t=v.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function b(e){v.setTimeout((function(){var t=y.onUnhandledError;if(!t)throw e;t(e)}))}function m(){}var w=g("C",void 0,void 0);function g(e,t,r){return{kind:e,value:t,error:r}}var _=null,x=function(e){function r(t){var r=e.call(this)||this;return r.isStopped=!1,t?(r.destination=t,d(t)&&t.add(r)):r.destination=P,r}return t(r,e),r.create=function(e,t,r){return new L(e,t,r)},r.prototype.next=function(e){this.isStopped?I(function(e){return g("N",e,void 0)}(e),this):this._next(e)},r.prototype.error=function(e){this.isStopped?I(g("E",void 0,e),this):(this.isStopped=!0,this._error(e))},r.prototype.complete=function(){this.isStopped?I(w,this):(this.isStopped=!0,this._complete())},r.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},r.prototype._next=function(e){this.destination.next(e)},r.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},r.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},r}(p),E=Function.prototype.bind;function S(e,t){return E.call(e,t)}var T=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){k(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){k(e)}else k(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){k(e)}},e}(),L=function(e){function r(t,r,n){var o,i,u=e.call(this)||this;return a(t)||!t?o={next:null!=t?t:void 0,error:null!=r?r:void 0,complete:null!=n?n:void 0}:u&&y.useDeprecatedNextContext?((i=Object.create(t)).unsubscribe=function(){return u.unsubscribe()},o={next:t.next&&S(t.next,i),error:t.error&&S(t.error,i),complete:t.complete&&S(t.complete,i)}):o=t,u.destination=new T(o),u}return t(r,e),r}(x);function k(e){var t;y.useDeprecatedSynchronousErrorHandling?(t=e,y.useDeprecatedSynchronousErrorHandling&&_&&(_.errorThrown=!0,_.error=t)):b(e)}function I(e,t){var r=y.onStoppedNotification;r&&v.setTimeout((function(){return r(e,t)}))}var P={closed:!0,next:m,error:function(e){throw e},complete:m},H="function"==typeof Symbol&&Symbol.observable||"@@observable";function C(e){return e}var O=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var r=new e;return r.source=this,r.operator=t,r},e.prototype.subscribe=function(e,t,r){var n,o=this,i=(n=e)&&n instanceof x||function(e){return e&&a(e.next)&&a(e.error)&&a(e.complete)}(n)&&d(n)?e:new L(e,t,r);return function(e){if(y.useDeprecatedSynchronousErrorHandling){var t=!_;if(t&&(_={errorThrown:!1,error:null}),e(),t){var r=_,n=r.errorThrown,o=r.error;if(_=null,n)throw o}}else e()}((function(){var e=o,t=e.operator,r=e.source;i.add(t?t.call(i,r):r?o._subscribe(i):o._trySubscribe(i))})),i},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var r=this;return new(t=M(t))((function(t,n){var o=new L({next:function(t){try{e(t)}catch(e){n(e),o.unsubscribe()}},error:n,complete:t});r.subscribe(o)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[H]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(r=e).length?C:1===r.length?r[0]:function(e){return r.reduce((function(e,t){return t(e)}),e)})(this);var r},e.prototype.toPromise=function(e){var t=this;return new(e=M(e))((function(e,r){var n;t.subscribe((function(e){return n=e}),(function(e){return r(e)}),(function(){return e(n)}))}))},e.create=function(t){return new e(t)},e}();function M(e){var t;return null!==(t=null!=e?e:y.Promise)&&void 0!==t?t:Promise}var A="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function j(e){if(e instanceof O)return e;if(null!=e){if(function(e){return a(e[H])}(e))return l=e,new O((function(e){var t=l[H]();if(a(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(e))return s=e,new O((function(e){for(var t=0;t<s.length&&!e.closed;t++)e.next(s[t]);e.complete()}));if(a(null==(i=e)?void 0:i.then))return o=e,new O((function(e){o.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,b)}));if(function(e){return Symbol.asyncIterator&&a(null==e?void 0:e[Symbol.asyncIterator])}(e))return B(e);if(function(e){return a(null==e?void 0:e[A])}(e))return t=e,new O((function(e){var r,o;try{for(var i=n(t),u=i.next();!u.done;u=i.next()){var c=u.value;if(e.next(c),e.closed)return}}catch(e){r={error:e}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(r)throw r.error}}e.complete()}));if(function(e){return a(null==e?void 0:e.getReader)}(e))return B(function(e){return function(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,o=r.apply(e,t||[]),i=[];return n={},c("next"),c("throw"),c("return"),n[Symbol.asyncIterator]=function(){return this},n;function c(e){o[e]&&(n[e]=function(t){return new Promise((function(r,n){i.push([e,t,r,n])>1||a(e,t)}))})}function a(e,t){try{(r=o[e](t)).value instanceof u?Promise.resolve(r.value.v).then(s,l):f(i[0][2],r)}catch(e){f(i[0][3],e)}var r}function s(e){a("next",e)}function l(e){a("throw",e)}function f(e,t){e(t),i.shift(),i.length&&a(i[0][0],i[0][1])}}(this,arguments,(function(){var t,n,o;return r(this,(function(r){switch(r.label){case 0:t=e.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,u(t.read())];case 3:return n=r.sent(),o=n.value,n.done?[4,u(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,u(o)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}(e))}var t,o,i,s,l;throw function(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}(e)}function B(e){return new O((function(t){(function(e,t){var o,i,u,c,a,s,l,f;return a=this,s=void 0,f=function(){var a,s;return r(this,(function(r){switch(r.label){case 0:r.trys.push([0,5,6,11]),o=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e=n(e),t={},o("next"),o("throw"),o("return"),t[Symbol.asyncIterator]=function(){return this},t);function o(r){t[r]=e[r]&&function(t){return new Promise((function(n,o){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,o,(t=e[r](t)).done,t.value)}))}}}(e),r.label=1;case 1:return[4,o.next()];case 2:if((i=r.sent()).done)return[3,4];if(a=i.value,t.next(a),t.closed)return[2];r.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=r.sent(),u={error:s},[3,11];case 6:return r.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:r.sent(),r.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(e,t){function r(e){try{o(f.next(e))}catch(e){t(e)}}function n(e){try{o(f.throw(e))}catch(e){t(e)}}function o(t){var o;t.done?e(t.value):(o=t.value,o instanceof l?o:new l((function(e){e(o)}))).then(r,n)}o((f=f.apply(a,s||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function z(e){return function(t){if(function(e){return a(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function U(e,t,r,n,o){return new D(e,t,r,n,o)}var D=function(e){function r(t,r,n,o,i,u){var c=e.call(this,t)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=r?function(e){try{r(e)}catch(e){t.error(e)}}:e.prototype._next,c._error=o?function(e){try{o(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,c._complete=n?function(){try{n()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,c}return t(r,e),r.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var r=this.closed;e.prototype.unsubscribe.call(this),!r&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},r}(x);function N(e,t){return z((function(r,n){var o=0;r.subscribe(U(n,(function(r){n.next(e.call(t,r,o++))})))}))}function Y(e,t,r){return void 0===r&&(r=1/0),a(t)?Y((function(r,n){return N((function(e,o){return t(r,e,n,o)}))(j(e(r,n)))}),r):("number"==typeof t&&(r=t),z((function(t,n){return function(e,t,r,n,o,i,u,c){var a=[],s=0,l=0,f=!1,p=function(){!f||a.length||s||t.complete()},d=function(e){return s<n?h(e):a.push(e)},h=function(e){s++;var o=!1;j(r(e,l++)).subscribe(U(t,(function(e){t.next(e)}),(function(){o=!0}),void 0,(function(){if(o)try{s--;for(var e=function(){var e=a.shift();h(e)};a.length&&s<n;)e();p()}catch(e){t.error(e)}})))};return e.subscribe(U(t,d,(function(){f=!0,p()}))),function(){}}(t,n,e,r)})))}var $=Array.isArray;var G=["addListener","removeListener"],F=["addEventListener","removeEventListener"],R=["on","off"];function q(e,t,r,n){if(a(r)&&(n=r,r=void 0),n)return q(e,t,r).pipe((u=n,N((function(e){return function(e,t){return $(t)?e.apply(void 0,i([],o(t))):e(t)}(u,e)}))));var u,s=o(function(e){return a(e.addEventListener)&&a(e.removeEventListener)}(e)?F.map((function(n){return function(o){return e[n](t,o,r)}})):function(e){return a(e.addListener)&&a(e.removeListener)}(e)?G.map(J(e,t)):function(e){return a(e.on)&&a(e.off)}(e)?R.map(J(e,t)):[],2),l=s[0],f=s[1];if(!l&&c(e))return Y((function(e){return q(e,t,r)}))(j(e));if(!l)throw new TypeError("Invalid event target");return new O((function(e){var t=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return e.next(1<t.length?t:t[0])};return l(t),function(){return f(t)}}))}function J(e,t){return function(r){return function(n){return e[r](t,n)}}}function K(e,t){return z(function(e,t,r,n,o){return function(n,o){var i=r,u=t,c=0;n.subscribe(U(o,(function(t){var r=c++;u=i?e(u,t,r):(i=!0,t),o.next(u)}),undefined))}}(e,t,arguments.length>=2))}var Q,V="",W="",X=[],Z=document.getElementById("guess"),ee=document.getElementById("hint"),te=document.getElementById("howto"),re=q(Z,"click"),ne=q(ee,"click"),oe=q(te,"click");function ie(e,t){var r=document.createElement("li");if(document.getElementById("input").value="","https://mediawiki.org/wiki/HyperSwitch/errors/not_found"==e.type)return r.innerHTML="Guess "+t+": "+document.getElementById("input").value+"<br>",r.classList.add("lose"),r.innerHTML+="No article found for "+document.getElementById("input").value,void document.getElementById("list").appendChild(r);r.innerHTML="Guess "+t+": "+e.titles.normalized+"<br>",function(e,t){t.split(" ").forEach((t=>{W.toLowerCase().replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"").split(" ").includes(t.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"").toLowerCase())?e.innerHTML+="<mark>"+t+"</mark> ":e.innerHTML+=t+" "}))}(r,e.description+" <br> "+e.extract),ue(e.description+" <br> "+e.extract),ce(),document.getElementById("list").appendChild(r),e.titles.normalized==V&&(alert("Congratulations - you have won the summary game in "+t+" guesses!"),r.classList.add("win"))}function ue(e){e.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"").replace(/\s{2,}/g," ").split(" ").forEach((e=>{X.includes(e)||X.push(e.toLowerCase())}))}function ce(){Q.innerHTML="Mystery article:\n",W.split(" ").forEach((e=>{X.includes(e.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"").toLowerCase())?Q.innerHTML+=e+" ":Q.innerHTML+="<mark>???</mark> "}))}function ae(e){var t=document.createElement("li");t.classList.add("game"),V=e.titles.normalized,W=e.description+" <br> "+e.extract,Q=t,ce(),document.getElementById("list").appendChild(t)}new O((e=>{fetch("https://en.wikipedia.org/api/rest_v1/page/random/summary").then((e=>e.json())).then((t=>{e.next(t),e.complete()}))})).subscribe((e=>ae(e)),(e=>ae("Error: "+e))),re.pipe(K((e=>e+1),0)).subscribe((e=>{new O((e=>{fetch("https://en.wikipedia.org/api/rest_v1/page/summary/"+document.getElementById("input").value.toLowerCase()).then((e=>e.json())).then((t=>{e.next(t),e.complete()}))})).subscribe((t=>ie(t,e)),(t=>ie("Error: "+t,e)))})),ne.pipe(K((e=>e+1),0)).subscribe((e=>{!function(e){if(e>5)alert("You have already used all of your hints!");else{ee.innerHTML="Hint ("+(5-e)+" left)";var t=document.createElement("li"),r="";do{r=W.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"").split(" ")[Math.floor(Math.random()*W.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g,"").split(" ").length)]}while(X.includes(r.toLowerCase()));t.innerHTML="Hint "+e+": <mark>"+r+"</mark>",ue(r),ce(),document.getElementById("list").appendChild(t)}}(e)})),oe.subscribe((()=>{var e;(e=document.createElement("li")).innerHTML="How to play: <br>Guess the title of the article from the description. Initially, all of the words of the mystery article will be hidden.<br>If you guess an article different from the goal, all of the words shared between the two descriptions will be revealed in the mystery article's description.<br>Use the hints to reveal a previously hidden word in the title.<br>You can only use 5 hints per game. <br><mark>Good luck and have fun!</mark>",document.getElementById("list").appendChild(e)})),q(document,"keydown").subscribe((e=>{13==e.keyCode&&""!=document.getElementById("input").value&&Z.click()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,